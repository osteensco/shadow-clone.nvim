local manager = require("manager.internal")

describe("manager.internal", function()
    local group, win

    before_each(function()
        group = manager.new_group()
        win = { bufnr = 1, win = 1, anchor = { x = 0, y = 0 } }
    end)

    describe("stack operations", function()
        it("should push a group onto the stack", function()
            manager.push(group, win)
            assert.are.equal(#group.members, 0) -- New group starts empty
            assert.are.equal(manager.get_len(), 1)
            assert.are.equal(manager.peek().zindex, 1)
        end)

        it("should pop a group off the stack", function()
            manager.push(group, win)
            local popped_group = manager.pop()
            assert.are.same(group, popped_group)
            assert.are.equal(manager.get_len(), 0)
        end)

        it("should peek at the top of the stack", function()
            manager.push(group, win)
            assert.are.same(manager.peek(), group)
        end)
    end)

    describe("group operations", function()
        it("should add a window to a group", function()
            manager.add_to_group(group, win)
            assert.are.same(group.members[1], win)
        end)

        it("should remove a window from a group", function()
            manager.add_to_group(group, win)
            manager.remove_from_group(group, win)
            assert.are.equal(#group.members, 0)
        end)

        it("should pop a group if it is empty after removing a window", function()
            manager.push(group, win)
            manager.add_to_group(group, win)
            manager.remove_from_group(group, win)
            assert.are.equal(manager.get_len(), 0)
        end)
    end)

    describe("zindex operations", function()
        it("should swap the top two groups on the stack", function()
            local group2 = manager.new_group()
            manager.push(group, win)
            manager.push(group2, win)
            manager.swap()
            assert.are.same(manager.peek(), group)
        end)

        it("should cycle the stack", function()
            local group2 = manager.new_group()
            manager.push(group, win)
            manager.push(group2, win)
            manager.cycle()
            assert.are.same(manager.peek(), group)
        end)
    end)

    describe("new_group", function()
        it("should create a new group with default values", function()
            local new_group = manager.new_group()
            assert.are.same(new_group.members, {})
            assert.are.equal(new_group.zindex, 0)
        end)
    end)

    describe("inspect", function()
        it("should return a string representation of the stack", function()
            manager.push(group, win)
            local output = manager.inspect()
            assert.truthy(output:match("zindex"))
        end)
    end)
end)
